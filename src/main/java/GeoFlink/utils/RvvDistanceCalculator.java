package GeoFlink.utils;

/**
 * A JNI wrapper class to call RVV-optimized native code for distance calculations.
 */
public class RvvDistanceCalculator {

    private static boolean libraryLoaded = false;

    static {
        try {
            // The name of the library should match the one generated by the Makefile, 
            // e.g., lib-rvvdist.so on Linux. System.loadLibrary handles the platform-specific naming.
            System.loadLibrary("rvvdist");
            libraryLoaded = true;
            System.out.println("Native RVV distance calculation library loaded successfully.");
        } catch (UnsatisfiedLinkError e) {
            // This allows the program to fall back to a pure Java implementation 
            // if the native library is not available for any reason (e.g., running on a non-RISC-V platform).
            System.err.println("Native RVV library not found. Falling back to Java implementation. Error: " + e.getMessage());
        }
    }

    /**
     * Checks if the native library was loaded successfully.
     * @return true if the library is available, false otherwise.
     */
    public static boolean isLibraryLoaded() {
        return libraryLoaded;
    }

    /**
     * Calculates the Euclidean distance between a query point (qx, qy) and a batch of stream points.
     * This method delegates the computation to a native C function optimized with RISC-V Vector Extension.
     *
     * @param qx The x-coordinate of the query point.
     * @param qy The y-coordinate of the query point.
     * @param streamX An array of x-coordinates for the stream points.
     * @param streamY An array of y-coordinates for the stream points.
     * @return An array of calculated distances. The length is the same as the input arrays.
     */
    public static native double[] calculateDistances(double qx, double qy, double[] streamX, double[] streamY);

    /**
     * A pure Java fallback implementation for distance calculation.
     * This is used if the native library cannot be loaded.
     *
     * @param qx The x-coordinate of the query point.
     * @param qy The y-coordinate of the query point.
     * @param streamX An array of x-coordinates for the stream points.
     * @param streamY An array of y-coordinates for the stream points.
     * @return An array of calculated distances.
     */
    public static double[] calculateDistancesJava(double qx, double qy, double[] streamX, double[] streamY) {
        int n = streamX.length;
        double[] distances = new double[n];
        
        for (int i = 0; i < n; i++) {
            double dx = streamX[i] - qx;
            double dy = streamY[i] - qy;
            distances[i] = Math.sqrt(dx * dx + dy * dy);
        }
        return distances;
    }
}
